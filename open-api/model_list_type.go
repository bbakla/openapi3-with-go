/*
Todo Application

Todo Application

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ListType the model 'ListType'
type ListType string

// List of ListType
const (
	DAILY   ListType = "DAILY"
	WEEKLY  ListType = "WEEKLY"
	MONTHLY ListType = "MONTHLY"
	YEARLY  ListType = "YEARLY"
)

// All allowed values of ListType enum
var AllowedListTypeEnumValues = []ListType{
	"DAILY",
	"WEEKLY",
	"MONTHLY",
	"YEARLY",
}

func (v *ListType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListType(value)
	for _, existing := range AllowedListTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListType", value)
}

// NewListTypeFromValue returns a pointer to a valid ListType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListTypeFromValue(v string) (*ListType, error) {
	ev := ListType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListType: valid values are %v", v, AllowedListTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListType) IsValid() bool {
	for _, existing := range AllowedListTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ListType value
func (v ListType) Ptr() *ListType {
	return &v
}

type NullableListType struct {
	value *ListType
	isSet bool
}

func (v NullableListType) Get() *ListType {
	return v.value
}

func (v *NullableListType) Set(val *ListType) {
	v.value = val
	v.isSet = true
}

func (v NullableListType) IsSet() bool {
	return v.isSet
}

func (v *NullableListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListType(val *ListType) *NullableListType {
	return &NullableListType{value: val, isSet: true}
}

func (v NullableListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
