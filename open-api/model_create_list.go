/*
Todo Application

Todo Application

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateList{}

// CreateList struct for CreateList
type CreateList struct {
	UserId   int64    `json:"userId"`
	ListName string   `json:"listName"`
	ListType ListType `json:"listType"`
	Tags     []Tag    `json:"tags,omitempty"`
}

type _CreateList CreateList

// NewCreateList instantiates a new CreateList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateList(userId int64, listName string, listType ListType) *CreateList {
	this := CreateList{}
	this.UserId = userId
	this.ListName = listName
	this.ListType = listType
	return &this
}

// NewCreateListWithDefaults instantiates a new CreateList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateListWithDefaults() *CreateList {
	this := CreateList{}
	return &this
}

// GetUserId returns the UserId field value
func (o *CreateList) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *CreateList) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *CreateList) SetUserId(v int64) {
	o.UserId = v
}

// GetListName returns the ListName field value
func (o *CreateList) GetListName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListName
}

// GetListNameOk returns a tuple with the ListName field value
// and a boolean to check if the value has been set.
func (o *CreateList) GetListNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListName, true
}

// SetListName sets field value
func (o *CreateList) SetListName(v string) {
	o.ListName = v
}

// GetListType returns the ListType field value
func (o *CreateList) GetListType() ListType {
	if o == nil {
		var ret ListType
		return ret
	}

	return o.ListType
}

// GetListTypeOk returns a tuple with the ListType field value
// and a boolean to check if the value has been set.
func (o *CreateList) GetListTypeOk() (*ListType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListType, true
}

// SetListType sets field value
func (o *CreateList) SetListType(v ListType) {
	o.ListType = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateList) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateList) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateList) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *CreateList) SetTags(v []Tag) {
	o.Tags = v
}

func (o CreateList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["listName"] = o.ListName
	toSerialize["listType"] = o.ListType
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *CreateList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"listName",
		"listType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateList := _CreateList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateList)

	if err != nil {
		return err
	}

	*o = CreateList(varCreateList)

	return err
}

type NullableCreateList struct {
	value *CreateList
	isSet bool
}

func (v NullableCreateList) Get() *CreateList {
	return v.value
}

func (v *NullableCreateList) Set(val *CreateList) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateList) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateList(val *CreateList) *NullableCreateList {
	return &NullableCreateList{value: val, isSet: true}
}

func (v NullableCreateList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
