openapi: 3.0.3
info:
  description: Todo Application
  title: Todo Application
  version: 1.0.0
servers:
- url: /
tags:
- name: list
- name: task
- name: user
- name: comment
- name: project
paths:
  /api/v1/users:
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: user created
      summary: creates a user
      tags:
      - user
  /api/v1/users/{userId}:
    delete:
      operationId: deleteUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: delete user
      summary: delete a user
      tags:
      - user
    get:
      operationId: getUser
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: return user
      summary: get user
      tags:
      - user
    put:
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: update user
      tags:
      - user
  /api/v1/lists:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/List'
                type: array
          description: successful operation
      summary: Gets available lists
      tags:
      - list
    post:
      operationId: createList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateList'
        description: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: successful operation
      summary: Creates a list
      tags:
      - list
components:
  schemas:
    CreateUser:
      example:
        name: name
        email: email
        lastname: lastname
      properties:
        name:
          type: string
        lastname:
          type: string
        email:
          type: string
      type: object
    User:
      allOf:
      - $ref: '#/components/schemas/CreateUser'
      - properties:
          id:
            format: int64
            type: integer
          createdAt:
            format: date-time
            type: string
          updatedAt:
            format: date-time
            type: string
        required:
        - id
        type: object
      description: saved user
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        id: 0
        email: email
        lastname: lastname
        updatedAt: 2000-01-23T04:56:07.000+00:00
    CreateList:
      example:
        listName: listName
        userId: 0
        listType: DAILY
        tags:
        - name: name
          id: 6
        - name: name
          id: 6
      properties:
        userId:
          format: int64
          type: integer
        listName:
          type: string
        listType:
          $ref: '#/components/schemas/ListType'
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
      - listName
      - listType
      - userId
      type: object
    List:
      allOf:
      - $ref: '#/components/schemas/CreateList'
      - properties:
          id:
            format: int64
            type: integer
          tasks:
            items:
              $ref: '#/components/schemas/Task'
            type: array
          fromDate:
            format: date-time
            type: string
          toDate:
            format: date-time
            type: string
        required:
        - id
        - userId
        type: object
      example:
        fromDate: 2000-01-23T04:56:07.000+00:00
        toDate: 2000-01-23T04:56:07.000+00:00
        listName: listName
        id: 1
        userId: 0
        listType: DAILY
        tasks:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          dueDate: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 5
          title: title
          priority: NOT_IMPORTANT
          userId: 5
          status: TODO
          tags:
          - name: name
            id: 6
          - name: name
            id: 6
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          dueDate: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 5
          title: title
          priority: NOT_IMPORTANT
          userId: 5
          status: TODO
          tags:
          - name: name
            id: 6
          - name: name
            id: 6
          updatedAt: 2000-01-23T04:56:07.000+00:00
        tags:
        - name: name
          id: 6
        - name: name
          id: 6
    Task:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        dueDate: 2000-01-23T04:56:07.000+00:00
        description: description
        id: 5
        title: title
        priority: NOT_IMPORTANT
        userId: 5
        status: TODO
        tags:
        - name: name
          id: 6
        - name: name
          id: 6
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: int64
          type: integer
        userId:
          format: int64
          type: integer
        title:
          type: string
        description:
          type: string
        dueDate:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/Status'
        priority:
          $ref: '#/components/schemas/Priority'
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - description
      - priority
      - status
      - userId
      type: object
    Tag:
      example:
        name: name
        id: 6
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
    Status:
      enum:
      - TODO
      - IN_PROGRESS
      - DONE
      type: string
    Priority:
      enum:
      - NOT_IMPORTANT
      - PLANNED
      - NORMAL
      - IMPORTANT
      - URGENT
      type: string
    ListType:
      enum:
      - DAILY
      - WEEKLY
      - MONTHLY
      - YEARLY
      type: string
